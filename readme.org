# -*- coding: utf-8-unix; mode:org; mode: auto-fill; fill-column: 80; ispell-local-dictionary: "american"; -*-

#+STARTUP: showall
#+STARTUP: hidestars
#+STARTUP: inlineimages
#+STARTUP: indent


#+TITLE:  Tcl librairies decimal and amount
#+DATE:   April 2022
#+AUTHOR: Mathieu Pouit
#+LANG: en


* Table of content                                                      :TOC:
- [[#the-package-decimal][The package decimal]]
  - [[#aim-of-the-package][Aim of the package]]
  - [[#basic-use][Basic use]]
  - [[#content-of-the-package][Content of the package]]
- [[#the-package-amount][The package amount]]

* The package decimal

** Aim of the package

The package decimal is meant to handle strings representing decimal values, but
that may not be recognized by Tcl as a numeric value. Tcl recognises numerical
values such as ~integer~ and ~double~. They are strings made of figures optionally
joint together with a point as decimal separator.

There are other representation of decimal values, that can be retrieved in
particular from a databasis such as Postgresql handling local particularities.

|-----------------+-------------+--------------+-----------|
| type of decimal | decimal sep | thousand sep | example   |
|-----------------+-------------+--------------+-----------|
| Tcl (generic)   | point: .    | nothing      | 12345.67  |
|-----------------+-------------+--------------+-----------|
| English         | point: .    | coma: ,      | 1,2345.67 |
|-----------------+-------------+--------------+-----------|
| French          | coma: ,     | space:       | 1 2345,67 |
|-----------------+-------------+--------------+-----------|

The purpose of this package is to gather all useful procedure arround handling
of such decimal values.


** Basic use

Suppose you load the package locally,

#+begin_src tcl
package require num::decimal 1.0
#+end_src

you may do translations between these representations in a friendly way.

#+begin_src tcl
decimal to double "1 345,60"
#+end_src

#+result
"1345.00"


#+begin_src tcl
double to decimal "1345.60"
#+end_src

#+result
"1 345,00"


The type of thousand and decimal separator is decided at
the package level and can be adapted.

#+begin_src tcl
decimal set thousandSep ,
decimal set decimalSep .
double to decimal "1345.60"
#+end_src

#+result
"1,345.00"

The package contains also simple operations between those decimal values.

#+begin_src tcl
decimal set thousandSep " "
decimal set decimalSep ,
decimal expr "134,50 + 1 345,45"
#+end_src

#+result
"1 479,95"

Some other basic operations are available and also recognition function. You can
explore the [[./test/decimal-1.0.test][test file]] for more examples.

Note, that the ~expr~ is a minimal implementation without check of error.


** Content of the package

The procedures of the package are the following ones:

#+begin_example
#
# decimal
#    │
#    ├── style : recognize the style of decimal
#    │
#    ├── get
#    │    │
#    │    ├── locale      : get decimal style for locale
#    │    │
#    │    ├── decimalSep  : retrieve the decimal separator in use 
#    │    │
#    │    ├── thousandSep : retrieve the thousands separator in use
#    │    │
#    │    └── accuracy    : get the number of decimal after decimal separator
#    │
#    ├── set
#    │    │
#    │    ├── decimalSep  : retrieve the decimal separator in use 
#    │    │
#    │    ├── thousandSep : retrieve the thousands separator in use
#    │    │
#    │    └── accuracy    : get the number of decimal after decimal separator
#    │
#    ├── from
#    │    │
#    │    └── double : convert a double to an amount
#    │
#    ├── format : shortcut for `decimal from double $data`
#    │
#    ├── null   :  return the null amount
#    │
#    ├── is
#    │    │
#    │    └── formatted : true if given string is formatted as an amount
#    │
#    ├── to
#    │    │
#    │    └── double : convert an amount to a double
#    │
#    └── expr    : apply expr to a string written with decimals
#
#+end_example



* The package amount

This package follows the package decimal by adding the representation of the
currency for financial values or the unit for string representing
quantities. Those kind of strings can be retrieved by formatted SQL queries. The
package ~amount~ facilitates a post-treatment that could be required in your
program. 

This package is organised as the preceding package decimal, so just have a look
in the preceding chapter to have a basic understanding of it. The internal of
this package is as following.

#+begin_example
#
# amount
#    │
#    ├── get
#    │    │
#    │    ├── currency    : retrieve the currency in use
#    │    │
#    │    ├── decimalSep  : retrieve the decimal separator in use 
#    │    │
#    │    ├── thousandSep : retrieve the thousands separator in use
#    │    │
#    │    ├── CurrencyAfterValue : return true if Currency is shown after Value
#    │    │
#    │    └── fmtStr : get the fmtStr stored in the name space.
#    │
#    ├── set
#    │    │
#    │    ├── currency :    set the currency to use
#    │    │
#    │    ├── decimalSep  : retrieve the decimal separator in use 
#    │    │
#    │    ├── thousandSep : retrieve the thousands separator in use
#    │    │
#    │    ├── currencyAfterValue : set Currency after value
#    │    │
#    │    ├── currencyBeforeValue : set Currency before value
#    │    │
#    │    └── fmtStr : set the fmtStr stored in the name space.
#    │
#    ├── null :  return the null amount
#    │
#    ├── from
#    │    │
#    │    └── double : convert a double to an amount
#    │
#    ├── is
#    │    │
#    │    └── formatted : true if given string is formatted as an amount
#    │
#    ├── to
#    │    │
#    │    └── double : convert an amount to a double
#    │
#    └── expr    : apply expr to a string written with amount
#
#+end_example

